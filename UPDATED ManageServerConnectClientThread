package server;

import common.Message;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class ManageServerConnectClientThread {
    public static ConcurrentHashMap<String, ServerConnectClientThread> map = new ConcurrentHashMap<>();
    public static ConcurrentHashMap<String, Vector<Message>> messageMap = new ConcurrentHashMap<>();

    public static boolean deleteMessage(String userId, Message message) {
        Vector<Message> messages = messageMap.get(userId);
        if (messages != null) {
            return messages.removeIf(m -> m.getId().equals(message.getId()));
        }
        return false;
    }
    public static String getOnlineFriends() {
        StringBuilder builder = new StringBuilder();
        for (Map.Entry<String, ServerConnectClientThread> entry : map.entrySet()) {
            builder.append(entry.getKey()).append(" ");
        }
        return builder.toString().trim();
    }
    public static Socket getSocketById(String userId) {
        ServerConnectClientThread thread = map.get(userId);
        if (thread == null) {
            return null;
        } else {
            return thread.getSocket();
        }
    }
   public static void sendAll(Socket socket, Message message) {
        map.forEach((userId, thread) -> {
            if (thread.getSocket() != socket) {
                try {
                    ObjectOutputStream oos = new ObjectOutputStream(thread.getSocket().getOutputStream());
                    oos.writeObject(message);
                } catch (IOException e) {
                    System.err.println("Error sending message to all: " + e.getMessage());
                }
            }
        });
    }
    public static void addMessage(String userId, Message message) {
        messageMap.computeIfAbsent(userId, k -> new Vector<>()).add(message);
    }
    public static void sendOffLineMessage(String userId) {
        Vector<Message> messages = messageMap.get(userId);
        if (messages != null && !messages.isEmpty()) {
            try {
                Socket socket = getSocketById(userId);
                ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
                messages.forEach(message -> {
                    try {
                        oos.writeObject(message);
                    } catch (IOException e) {
                        System.err.println("Error sending offline messages: " + e.getMessage());
                    }
                });
                messages.clear();
            } catch (IOException e) {
                System.err.println("Failed to send offline messages for " + userId + ": " + e.getMessage());
            }
        }
    }

    public static void deleteSocket(String userId) {
        map.remove(userId);
    }
    public static void addThread(String userId, ServerConnectClientThread thread) {
        map.put(userId, thread);
    }
}
