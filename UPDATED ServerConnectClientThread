package server;

import common.Message;
import common.MessageType;
import main.AppServer;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

/**
 * Team Project(Project 05) -- ServerConnectClientThread
 * <p>
 * An object of this class communicates with a specific client.
 *
 * @version Apr 10, 2024
 */
public class ServerConnectClientThread extends Thread {
    private Socket socket; // Socket corresponding to the current user
    private String userId;
    private boolean flag = true; // Indicates whether the login is successful
    private ObjectInputStream ois;
    private ObjectOutputStream oos;

    public ServerConnectClientThread(Socket socket, String userId) {
        this.socket = socket;
        this.userId = userId;
    }

    @Override
    public void run() {
        System.out.println("User [" + userId + "] connected with server……");
        while (flag) {
            try {
                ois = new ObjectInputStream(socket.getInputStream());
                Message message = (Message) ois.readObject();
                actionByMessageType(message);
            } catch (Exception e) {
                System.out.println("Error processing message: " + e.getMessage());
                try {
                    sendErrorMessage("Error processing your request.");
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        }
    }

    private void actionByMessageType(Message message) throws IOException {
        switch (message.getMessageType()) {
            case MessageType.MESSAGE_GET_ONLINE_FRIEND:
                handleOnlineFriendsRequest(message);
                break;
            case MessageType.MESSAGE_CLIENT_EXIT:
                handleClientExit();
                break;
            case MessageType.MESSAGE_COMM_MES:
                handleCommunicationMessage(message);
                break;
            case MessageType.MESSAGE_DELETE_MES:
                handleDeleteMessage(message);
                break;
        }
    }

    private void handleOnlineFriendsRequest(Message message) throws IOException {
        Message response = new Message();
        response.setMessageType(MessageType.MESSAGE_RET_ONLINE_FRIEND);
        response.setGetter(message.getSender());
        response.setContent(ManageServerConnectClientThread.getOnlineFriends());
        oos = new ObjectOutputStream(socket.getOutputStream());
        oos.writeObject(response);
    }

    private void handleClientExit() throws IOException {
        flag = false;
        ManageServerConnectClientThread.deleteSocket(userId);
        socket.close();
        System.out.println("User " + userId + " is disconnected！");
    }

    private void handleCommunicationMessage(Message message) throws IOException {
        if (message.getGetter().equals("All")) {
            ManageServerConnectClientThread.sendAll(socket, oos, message);
        } else {
            Socket targetSocket = ManageServerConnectClientThread.getSocketById(message.getGetter());
            Message forwardMessage = message;
            if (!AppServer.isUser(message.getGetter())) { // Check if the user is in the database
                forwardMessage.setMessageType(MessageType.MESSAGE_CLIENT_NO_EXIST);
                forwardMessage.setGetter(message.getGetter());
                targetSocket = this.socket;
            } else if (targetSocket == null) { // Receiver is offline
                forwardMessage.setMessageType(MessageType.MESSAGE_CLIENT_OFFLINE);
                forwardMessage.setGetter(message.getGetter());
                ManageServerConnectClientThread.addMessage(message.getGetter(), message);
            }
            oos = new ObjectOutputStream(targetSocket.getOutputStream());
            oos.writeObject(forwardMessage);
        }
    }

    private void handleDeleteMessage(Message message) throws IOException {
        boolean deleted = ManageServerConnectClientThread.deleteMessage(message.getGetter(), message);
        Message response = new Message();
        response.setGetter(message.getSender());
        if (deleted) {
            response.setMessageType(MessageType.MESSAGE_DELETE_SUCCESS);
            response.setContent("Message deleted!");
        } else {
            response.setMessageType(MessageType.MESSAGE_DELETE_FAIL);
            response.setContent("Failed to delete message.");
        }
        oos = new ObjectOutputStream(socket.getOutputStream());
        oos.writeObject(response);
        System.out.println("Message deletion response sent for user " + message.getGetter() + "");
    }

    private void sendErrorMessage(String errorMsg) throws IOException {
        Message response = new Message();
        response.setMessageType(MessageType.MESSAGE_ERROR);
        response.setContent(errorMsg);
        oos = new ObjectOutputStream(socket.getOutputStream());
        oos.writeObject(response);
    }

    public Socket getSocket() {
        return socket;
    }
}
