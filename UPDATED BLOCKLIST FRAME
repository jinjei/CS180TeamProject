package UI;

import common.User;
import util.FileUtil;
import util.FrameUtil;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 * A frame used for displaying and managing a user's block list in a chat application.
 *
 * <p>This frame provides functionalities to view and manage users that are currently blocked by the user.
 * Users can be unblocked using the interface provided by this frame.</p>
 */
public class BlockListFrame {
    private JPanel root;
    private JButton removeBtn;
    private JTable table1;

    private Object[][] a;
    private final Object[] name = {"", "Icon", "Username"};
    private Set<String> userNameSets = new HashSet<>();
    private User currentUser;
    private JFrame frame;
    private ConcurrentHashMap<String, User> users;

    public void init(CustomModel model, ConcurrentHashMap<String, User> users) {
        a = new Object[users.size()][3];
        model.setRowCount(0);
        int i = 0;
        for (String key : currentUser.getBlockedUsers()) {
            a[i][0] = Boolean.FALSE;
            a[i][1] = users.get(key).getBio();
            a[i][2] = users.get(key).getUsername();
            model.addRow(a[i]);
            i++;
        }
    }

    class CustomModel extends DefaultTableModel {

        public boolean isCellEditable(int row, int column) {
            if (column > 0) {
                System.out.println("1");
                return false;
            } else {
                if (table1.getValueAt(row, column).toString().equalsIgnoreCase("false")) {
                    System.out.println("Selected" + table1.getValueAt(row, 2));
                    userNameSets.add(table1.getValueAt(row, 2).toString());
                } else {
                    System.out.println("Cancelled" + table1.getValueAt(row, 2).toString());
                    userNameSets.remove(table1.getValueAt(row, 2).toString());
                }
                return true;
            }
        }
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
    }

    public BlockListFrame(ConcurrentHashMap<String, User> users, User user) {
        this.users = users;
        this.currentUser = user;
        frame = new JFrame("BlockList");
        frame.setContentPane(this.root);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(500, 300);
        FrameUtil.center(frame);
        frame.setVisible(true);

        CustomModel model = new CustomModel();
        for (Object o : name) {
            model.addColumn(o);
        }
        init(model, users);
        table1.setModel(model);
        table1.setRowHeight(80);

        removeBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleRemoveAction(model);
            }
        });
    }
    private void handleRemoveAction(CustomModel model) {
        if (userNameSets.isEmpty()) {
            JOptionPane.showMessageDialog(root, "Please select one person!");
        } else if (userNameSets.size() > 1) {
            JOptionPane.showMessageDialog(root, "Only one can be removed at a time!");
        } else {
            for (String name : userNameSets) {
                setUsers();
                currentUser.unblockUser(name);
                JOptionPane.showMessageDialog(root, "User unblocked: " + name);
                FileUtil.setUser(users);
                UserInterfaceFrame.getInstance().flush();
                init(model, users);
            }
        }
    }
    public void setUsers() {
        this.users = FileUtil.getUsers();
    }
}
